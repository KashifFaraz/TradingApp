@model TradingApp.Models.Invoice

@{
    ViewData["Title"] = "Create";
}

<h1>Invoice</h1>
<hr />
<div class="row">
    <div class="col-md-12">
        <form id="tradingForm" asp-action="Create">
            <div asp-validation-summary="All" class="text-danger"></div>
            <table class="model-state">
                @foreach (var item in ViewContext.ViewData.ModelState)
                {
                    if (item.Value.Errors.Any())
                    {
                        <tr>
                            <td><b>@item.Key</b></td>
                            <td>@((item.Value == null || item.Value == null) ? "<null>" : item.Value.RawValue)</td>
                            <td>@(string.Join("; ", item.Value.Errors.Select(x => x.ErrorMessage)))</td>
                        </tr>
                    }
                }
            </table>

            <div class="col-md-4">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />

                @*  <div class="form-group">
                <label asp-for="CustomId" class="control-label"></label>
                <input asp-for="CustomId" class="form-control" />
                <span asp-validation-for="CustomId" class="text-danger"></span>
                </div> *@

                <div class="form-group">
                    <label asp-for="DocDate" class="control-label"></label>
                    <input asp-for="DocDate" class="form-control" type="date" />
                    <span asp-validation-for="DocDate" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="StakeholderId" class="control-label"></label>
                    @Html.DropDownListFor(model => model.StakeholderId, (SelectList)ViewData["Stakeholder"], "-- Select Customer --", new { @class = "form-control" })
                    <span asp-validation-for="StakeholderId" class="text-danger"></span>
                </div>
                @*  <div class="form-group">
                <label asp-for="BankName" class="control-label"></label>
                <input asp-for="BankName" class="form-control" />
                <span asp-validation-for="BankName" class="text-danger"></span>
                </div>
                <div class="form-group">
                <label asp-for="AccountTitle" class="control-label"></label>
                <input asp-for="AccountTitle" class="form-control" />
                <span asp-validation-for="AccountTitle" class="text-danger"></span>
                </div> *@
                @*  <div class="form-group">
                <label asp-for="Rfqid" class="control-label"></label>
                <select asp-for="Rfqid" class="form-control" asp-items="ViewBag.Rfqid"></select>
                </div>
                *@                <div class="form-group">
                    <label asp-for="DueDate" class="control-label"></label>
                    <input asp-for="DueDate" class="form-control" type="date" />
                    <span asp-validation-for="DueDate" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <textarea asp-for="Description" class="form-control"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                @*  <div class="form-group">
                <label asp-for="QuoteId" class="control-label"></label>
                <select asp-for="QuoteId" class="form-control" asp-items="ViewBag.QuoteId"></select>
                </div>
                <div class="form-group">
                <label asp-for="PurchaseOrderId" class="control-label"></label>
                <select asp-for="PurchaseOrderId" class="form-control" asp-items="ViewBag.PurchaseOrderId"></select>
                </div>
                <div class="form-group">
                <label asp-for="SalesOderId" class="control-label"></label>
                <select asp-for="SalesOderId" class="form-control" asp-items="ViewBag.SalesOderId"></select>
                </div>
                <div class="form-group">
                <label asp-for="InvoiceId" class="control-label"></label>
                <select asp-for="InvoiceId" class="form-control" asp-items="ViewBag.InvoiceId"></select>
                </div> *@
                @*  <div class="form-group">
                <label asp-for="SubTotal" class="control-label"></label>
                <input asp-for="SubTotal" class="form-control" />
                <span asp-validation-for="SubTotal" class="text-danger"></span>
                </div>
                <div class="form-group">
                <label asp-for="TotalAmount" class="control-label"></label>
                <input asp-for="TotalAmount" class="form-control" />
                <span asp-validation-for="TotalAmount" class="text-danger"></span>
                </div> *@
                @*   <div class="form-group">
                <label asp-for="CreatedBy" class="control-label"></label>
                <input asp-for="CreatedBy" class="form-control" />
                <span asp-validation-for="CreatedBy" class="text-danger"></span>
                </div>
                <div class="form-group">
                <label asp-for="CraetedOn" class="control-label"></label>
                <input asp-for="CraetedOn" class="form-control" />
                <span asp-validation-for="CraetedOn" class="text-danger"></span>
                </div>
                <div class="form-group">
                <label asp-for="EditedBy" class="control-label"></label>
                <input asp-for="EditedBy" class="form-control" />
                <span asp-validation-for="EditedBy" class="text-danger"></span>
                </div>
                <div class="form-group">
                <label asp-for="EditedOn" class="control-label"></label>
                <input asp-for="EditedOn" class="form-control" />
                <span asp-validation-for="EditedOn" class="text-danger"></span>
                </div> *@
            </div>
            @* ---line code-- *@
            <div class="row">
                <div class="col-md-12">
                    <table id="tradingLinesTable" class="table">
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Description</th>
                                <th>Unit Price</th>
                                <th>Quantity</th>
                                <th>Amount</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model?.InvoiceLines.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <div class="form-group">
                                            @* <label asp-for="@Model.TransectionLines.ElementAt(i).ItemId" class="control-label"></label> *@
                                            <select name="TransectionLines[@i].ItemId" class="form-control" onchange="updateUnitPrice(this, @i)">
                                                <option value="">-- Select Item --</option>
                                                @foreach (var item in (IEnumerable<Item>)ViewData["Item"])
                                                {
                                                    var itemViewModel = item as Item;

                                                    if (item.Id.ToString() == Model.InvoiceLines.ElementAt(i).ItemId.ToString())
                                                    {
                                                        <option value="@item.Id" data-price="@item.Price" selected>@item.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@item.Id" data-price="@item.Price">@item.Name</option>
                                                    }
                                                }
                                            </select>
                                            <span class="text-danger field-validation-valid" data-valmsg-for="TransectionLines[@i].ItemId" data-valmsg-replace="true"></span>

                                        </div>
                                    </td>
                                    <td>
                                        <input type="hidden" name="TransectionLines[@i].Id" value="@Model.InvoiceLines.ElementAt(i).Id" />

                                        <div class="form-group">
                                            @* <label asp-for="@Model.TransectionLines.ElementAt(i).Description" class="control-label"></label> *@
                                            <input name="TransectionLines[@i].Description" class="form-control" value="@Model.InvoiceLines.ElementAt(i).Description" />

                                            <span asp-validation-for="@Model.InvoiceLines.ElementAt(i).Description" class="text-danger"></span>
                                        </div>
                                    </td>

                                    <td>
                                        <div class="form-group">
                                            <input name="TransectionLines[@i].UnitPrice" class="form-control" value="@Model.InvoiceLines.ElementAt(i).UnitPrice" oninput="calculateAmount(@i)" />
                                            <span class="text-danger field-validation-valid" data-valmsg-for="TransectionLines[@i].UnitPrice" data-valmsg-replace="true"></span>

                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            @* <label asp-for="@Model.TransectionLines.ElementAt(i).Quantity" class="control-label"></label> *@
                                            <input name="TransectionLines[@i].Quantity" class="form-control" value="@Model.InvoiceLines.ElementAt(i).Quantity" oninput="calculateAmount(@i)" />
                                            <span asp-validation-for="@Model.InvoiceLines.ElementAt(i).Quantity" class="text-danger"></span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            @* <label asp-for="@Model.TransectionLines.ElementAt(i).Amount" class="control-label"></label> *@
                                            <input name="TransectionLines[@i].Amount" class="form-control" value="@Model.InvoiceLines.ElementAt(i).Amount" readonly />
                                            <span asp-validation-for="@Model.InvoiceLines.ElementAt(i).Amount" class="text-danger"></span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="form-group">
                                            <button type="button" class="btn btn-danger" onclick="removeTradingDocumentDetail(this)">Remove Row</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
            <div class="mb-3">
                <div class="row">
                    <div id="TransectionLinesContainer">
                        <!-- Placeholder for dynamically added rows -->
                    </div>
                    <div class="col text-start">
                        <button type="button" class="btn btn-primary" onclick="addTradingDocumentDetail()">Add Row </button>
                    </div>
                </div>
            </div>
            <div class="mt-3">
                <div class="row">
                    <div class="col text-end">
                        <h4>Subtotal: <span id="subtotalAmount">0.00</span></h4>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-end">
                        <h4>Grand Total: <span id="grandTotalAmount">0.00</span></h4>
                    </div>
                </div>
            </div>







            @* --line code --- *@
            <div class="row">
                <div class="col-md-6  mb-3">
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-primary" id="saveButton" />
                    </div>
                </div>
            </div>

        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>
        function updateUnitPrice(selectElement, index) {
            var selectedItemId = selectElement.value;
            var selectedItem = selectElement.options[selectElement.selectedIndex];
            var unitPrice = selectedItem.dataset.price;

            var unitPriceInputElement = document.querySelector('input[name="TransectionLines[' + index + '].UnitPrice"]');
            if (unitPriceInputElement) {
                unitPriceInputElement.value = unitPrice;
            }
            calculateAmount(index);
        }
        function initializeValidation() {
            $('form').removeData('validator');
            $('form').removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse('#tradingForm');
            // Initialize jQuery validation
            var validator = $('form').validate();

            // Log the validator object
            console.log(validator);
        }
        document.addEventListener('DOMContentLoaded', function () {
            // Add click event listener to the Save button
            document.getElementById('saveButton').addEventListener('click', function () {
                initializeValidation();
                $.validator.unobtrusive.parse(".target");
                $("#tradingForm").removeData("validator").removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse("#tradingForm");

                // Access the validator object
                var validator = $('#tradingForm').validate();

                $('select[name^="TransectionLines["][name$="].ItemId"]').each(function (index) {
                    var fieldName = $(this).attr('name');
                    // Ensure that the rules object exists for the current input field
                    if (!validator.settings.rules[fieldName]) {
                        validator.settings.rules[fieldName] = {}; // Create rules object if it doesn't exist
                    }
                    // Add new validation rules
                    validator.settings.rules[fieldName]['required'] = true;
                    // Add more validation rules as needed

                    // Optionally, add messages for the new validation rules
                    validator.settings.messages[fieldName] = {
                        required: "Please select an item"// Custom message for required rule
                        // Add more messages as needed
                    };
                });

                $('input[name^="TransectionLines["][name$="].UnitPrice"]').each(function (index) {
                    var fieldName = $(this).attr('name');
                    // Ensure that the rules object exists for the current input field
                    if (!validator.settings.rules[fieldName]) {
                        validator.settings.rules[fieldName] = {}; // Create rules object if it doesn't exist
                    }
                    // Add new validation rules
                    validator.settings.rules[fieldName]['required'] = true;
                    // Add more validation rules as needed

                    // Optionally, add messages for the new validation rules
                    validator.settings.messages[fieldName] = {
                        required: "Please enter a value for Unit Price"// Custom message for required rule
                        // Add more messages as needed
                    };
                });


                // Log all validation rules
                Object.keys(validator.settings.rules).forEach(function (fieldName) {
                    console.log("Field: " + fieldName);
                    console.log("Rules: ", validator.settings.rules[fieldName]);
                });



                // Manually trigger client-side validation
                if (validateForm()) {
                    // If validation passes, proceed with form submission
                    document.getElementById('#tradingForm').submit(); // Replace 'yourFormId' with the ID of your form
                }
            });
        });

        function validateForm() {
            // Assuming you're using jQuery Validate for client-side validation
            return $('#tradingForm').valid(); // Replace 'yourFormId' with the ID of your form
        }


        // Global variable to keep track of the current index

        var currentIndex = @(Model?.InvoiceLines.Count ?? 0);



        // calculate at Edit View Load
        calculateGrandTotal();

        // JavaScript function to add a new row for TransectionLines

        function addTradingDocumentDetail() {
            var tableBody = document.querySelector('#tradingLinesTable tbody');

            // Create a new row
            var newRow = document.createElement('tr');

            newRow.innerHTML = `<td>
              <div class="form-group">
                  <select name="TransectionLines[${currentIndex}].ItemId" class="form-control" onchange="updateUnitPrice(this, ${currentIndex})">
                      <option value="">-- Select Item --</option>
        @foreach (var item in (IEnumerable<Item>)ViewData["Item"])
        {
                              <option data-price="@item.Price" value="@item.Id">@item.Name</option>
        }
                  </select>
                  <span class="text-danger field-validation-valid" data-valmsg-for="TransectionLines[${currentIndex}].ItemId" data-valmsg-replace="true"></span>
              </div>
          </td>
          <td>
              <div class="form-group">
                  <input name="TransectionLines[${currentIndex}].Description" class="form-control" />
                  <span asp-validation-for="TransectionLines[${currentIndex}].Description" class="text-danger"></span>


              </div>
          </td>
          <td>
              <div class="form-group">

                  <input name="TransectionLines[${currentIndex}].UnitPrice" class="form-control" oninput="calculateAmount(${currentIndex})" />
                  <span class="text-danger field-validation-valid" data-valmsg-for="TransectionLines[${currentIndex}].UnitPrice" data-valmsg-replace="true"></span>




              </div>
          </td>
          <td>
              <div class="form-group">

                  <input name="TransectionLines[${currentIndex}].Quantity" class="form-control" oninput="calculateAmount(${currentIndex})" />
                  <span asp-validation-for="TransectionLines[${currentIndex}].Quantity" class="text-danger"></span>
              </div>
          </td>
          <td>

              <div class="form-group">

                  <input name="TransectionLines[${currentIndex}].Amount" class="form-control" readonly />
                  <span asp-validation-for="TransectionLines[${currentIndex}].Amount" class="text-danger"></span>
              </div>
          </td>
          <td>
              <div class="form-group">
                  <button type="button" class="btn btn-danger" onclick="removeTradingDocumentDetail(this)">Remove Row</button>
              </div>
          </td>
          `;

            // Append the new row to the table body
            tableBody.appendChild(newRow);

            // Increment the index for the next row
            currentIndex++;

        }

        // JavaScript function to remove a row for TransectionLines
        function removeTradingDocumentDetail(button) {
            var row = button.parentNode.parentNode.parentNode;
            row.parentNode.removeChild(row);

            calculateGrandTotal();
        }

        // Function to calculate Amount based on UnitPrice and Quantity
        function calculateAmount(index) {
            var unitPrice = parseFloat(document.getElementsByName(`TransectionLines[${index}].UnitPrice`)[0].value) || 0;
            var quantity = parseFloat(document.getElementsByName(`TransectionLines[${index}].Quantity`)[0].value) || 0;
            var amount = unitPrice * quantity;
            document.getElementsByName(`TransectionLines[${index}].Amount`)[0].value = amount.toFixed(2);
            calculateGrandTotal();
        }



        // Calculate and display the grand total
        function calculateGrandTotal() {
            var grandTotal = 0;

            // Iterate through each row in the table
            var rows = document.querySelectorAll('#tradingLinesTable tbody tr');
            rows.forEach(function (row) {
                // Get the amount input element in the current row
                var amountInput = row.querySelector('input[name^="TransectionLines["][name$="].Amount"]');

                // Get the value of the amount input (assuming it's a numeric value)
                var amount = parseFloat(amountInput.value) || 0;

                // Accumulate the amount to the grand total
                grandTotal += amount;
            });

            // Display the grand total
            var grandTotalElement = document.getElementById('grandTotalAmount');
            if (grandTotalElement) {
                grandTotalElement.textContent = formatNumberWithCommas(grandTotal.toFixed(2)); // Format the total with two decimal places
            }
            var subtotalAmountElement = document.getElementById('subtotalAmount');

            if (subtotalAmountElement) {
                subtotalAmountElement.textContent = formatNumberWithCommas(grandTotal.toFixed(2)); // Format the total with two decimal places
            }

        }


        // Check if the URL contains "/Create/0" to add the first row
        if (window.location.href.includes("/Create/0")) {
            // Add first row
            addTradingDocumentDetail();
        }
        function formatNumberWithCommas(number) {
            return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
    </script>


    @*   <script src="~/Scripts/jquery.js"></script>
    <script src="~/Scripts/jquery.validation.js"></script>
    <script src="~/Scripts/jquery.validation.unobtrusive.js"></script> *@

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}



@using static TradingApp.Utility.Constants;
@model TradingApp.Models.Invoice

@{
    ViewData["Title"] = "Invoice Form";
}
@section PageHeaderContent {
    <div class="sticky-header">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <!-- Left aligned heading -->
            <h5 class="mb-0">
                <a href="@Url.Action("Index", "Invoices")" class="btn btn-secondary me-2">Back to Invoices</a>


                @if (Model?.Id != null && Model.Id != 0)
                {
                    <span style="color: grey;"># @Model.Id</span>
                }
            </h5>

            <!-- Right aligned buttons -->
            <div class="d-flex">
                @if (Model?.DocStatus == (byte)DocumentStatus.Finalized)
                {
                    <form id="resetForm" class="me-2">
                        @Html.AntiForgeryToken()
                        <!-- Reset to Draft button -->
                        <input type="submit" value="Reset to Draft" class="btn btn-primary" id="resetToDraftButton" />
                    </form>
                }
                @if (Model?.DocStatus == null || Model?.DocStatus == (byte)DocumentStatus.Draft)
                {
                    <!-- Save button -->

                    <input type="submit" value="Save" class="btn btn-primary me-2" id="saveDraftButton" />
                    <input type="submit" value="Finalize" class="btn btn-primary" id="saveButton" />
                }
            </div>
        </div>
    </div>
}
@* <hr /> *@

<div id="resultContainer"></div>

<form id="tradingForm" asp-action="Create">
    <div class="row">

        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="col-md-4">
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="Currency" value="@ViewBag.Currency" />
            <input type="hidden" asp-for="DocStatusInput" />



            <div class="form-group">
                <label asp-for="CustomId" class="control-label"></label>
                <input asp-for="CustomId" class="form-control" />
                <span class="text-danger field-validation-valid" data-valmsg-for="CustomId" data-valmsg-replace="true"></span>
               
            </div>
            <div class="form-group">
                <label asp-for="DocDate" class="control-label"></label>
                <input asp-for="DocDate" class="form-control" type="date" />
                <span class="text-danger field-validation-valid" data-valmsg-for="DocDate" data-valmsg-replace="true"></span>
            </div>
            <div class="form-group">
                <label asp-for="StakeholderId" class="control-label"></label>
                @Html.DropDownListFor(model => model.StakeholderId, (SelectList)ViewData["Stakeholder"], "-- Select Customer --", new { @class = "form-control" })
                <span class="text-danger field-validation-valid" data-valmsg-for="StakeholderId" data-valmsg-replace="true"></span>

            </div>
            <div class="form-group">
                <label asp-for="DueDate" class="control-label"></label>
                <input asp-for="DueDate" class="form-control" type="date" />
                <span class="text-danger field-validation-valid" data-valmsg-for="DueDate" data-valmsg-replace="true"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span class="text-danger field-validation-valid" data-valmsg-for="Description" data-valmsg-replace="true"></span>
               
            </div>

        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="terms" class="control-label">Terms</label>
                <textarea asp-for="Terms" class="form-control" id="terms" rows="3" maxlength="1000"></textarea>
                <span class="text-danger field-validation-valid" data-valmsg-for="Terms" data-valmsg-replace="true"></span>
                
            </div>
            <div class="form-group mt-3">
                <label for="notes" class="control-label">Notes</label>
                <textarea asp-for="Notes" class="form-control" id="notes" rows="3" maxlength="1000"></textarea>
                <span class="text-danger field-validation-valid" data-valmsg-for="Notes" data-valmsg-replace="true"></span>
            </div>
        </div>
        @if (Model?.PaymentReconciliationStatus != null && Model?.PaymentReconciliationStatus != (byte)PaymentReconciliationStatus.Unreconciled)
        {
            <div class="col-md-4">

                <div class="row mt-4">
                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title text-muted">Paid Amount</h6>
                                <p class="card-text fs-5">
                                    @String.Format("{0:N}", Model?.TotalAmount - Model?.UnreconciledAmount)
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title text-muted">Unpaid Amount</h6>
                                <p class="card-text fs-5">@Html.DisplayFor(model => model.UnreconciledAmount)</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
    @* ---line code-- *@
    <div class="row  mt-4">
        <div class="col-md-12">
            <table id="tradingLinesTable" class="table table-hover borderless-table no-padding-table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Item</th>
                        <th>Description</th>
                        <th>Unit Price</th>
                        <th>Quantity</th>
                        <th>Disc. %</th>
                        <th>Tax %</th>
                        <th>Amount</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model?.InvoiceLines?.Count; i++)
                    {
                        <tr id="row-@i" tabindex="0"
                            ondragover="allowDrop(event)"
                            ondrop="drop(event)"
                            ondragleave="dragLeave(event)">
                            <td>
                                <div class="form-group">
                                    <button type="button" class="btn btn-outline-secondary no-outline drag-handle"
                                            draggable="true"
                                            ondragstart="drag(event)"
                                            ondragend="dragEnd()"
                                            aria-label="Drag to move row">
                                        <i class="bi bi-grip-vertical"></i>
                                    </button>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    @* <label asp-for="@Model.InvoiceLines.ElementAt(i).ItemId" class="control-label"></label> *@
                                    <select name="InvoiceLines[@i].ItemId" class="form-control" onchange="updateUnitPrice(this)">
                                        <option value="">-- Select Item --</option>

                                        @ViewData["Item"];
                                        @foreach (var item in (IEnumerable<Item>)ViewData["Item"] ?? new List<Item>())
                                        {  var itemViewModel = item as Item;

                                            if (item.Id.ToString() == Model.InvoiceLines.ElementAt(i).ItemId.ToString())
                                            {
                                                <option value="@item.Id" data-price="@item.Price" data-SaleUnitId="@item.SaleUnit" data-SaleUnit="@item.SaleUnitNavigation.Symbol" selected>@item.Name</option>
                                            }
                                            else
                                            {
                                                <option value="@item.Id" data-SaleUnitId="@item.SaleUnit" data-SaleUnit="@item.SaleUnitNavigation.Symbol" data-price="@item.Price">@item.Name</option>
                                            } 
                                         }
                                    </select>
                                    <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[@i].ItemId" data-valmsg-replace="true"></span>

                                </div>
                            </td>
                            <td>
                                <input type="hidden" name="InvoiceLines[@i].Id" value="@Model.InvoiceLines.ElementAt(i).Id" />

                                <div class="form-group">
                                    @* <label asp-for="@Model.InvoiceLines.ElementAt(i).Description" class="control-label"></label> *@
                                    <input name="InvoiceLines[@i].Description" class="form-control" value="@Model.InvoiceLines.ElementAt(i).Description" />

                                    <span asp-validation-for="@Model.InvoiceLines.ElementAt(i).Description" class="text-danger"></span>
                                </div>
                            </td>

                            <td>
                                <div class="input-group">
                                    <input name="InvoiceLines[@i].UnitPrice" class="form-control" value="@Model.InvoiceLines.ElementAt(i).UnitPrice" oninput="calculateAmount(this)" />
                                    @* <span class="input-group-text" name="InvoiceLines[@i].Item.SaleUnitNavigation.Symbol">@Model.InvoiceLines.ElementAt(i).Item.SaleUnitNavigation.Symbol</span> *@
                                    <span class="input-group-text" name="InvoiceLines[@i].Item.SaleUnitNavigation.Symbol">
                                        @{
                                            var item2 = ((IEnumerable<Item>)ViewData["Item"]).FirstOrDefault(it => it.Id == Model.InvoiceLines.ElementAt(i).ItemId);
                                            var symbol = item2?.SaleUnitNavigation?.Symbol ?? string.Empty; // Fallback to empty string if null
                                        }
                                        @symbol
                                    </span>
                                </div>
                                <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[@i].UnitPrice" data-valmsg-replace="true"></span>
                            </td>
                            <td>
                                <div class="form-group">
                                    @* <label asp-for="@Model.InvoiceLines.ElementAt(i).Quantity" class="control-label"></label> *@
                                    <input name="InvoiceLines[@i].Quantity" class="form-control" value="@Model.InvoiceLines.ElementAt(i).Quantity" oninput="calculateAmount(this)" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[@i].Quantity" data-valmsg-replace="true"></span>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <input name="InvoiceLines[@i].DiscountPercentage" class="form-control" value="@Model.InvoiceLines.ElementAt(i).DiscountPercentage" oninput="calculateAmount(this)" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[@i].DiscountPercentage" data-valmsg-replace="true"></span>

                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <input name="InvoiceLines[@i].TaxPercentage" class="form-control" value="@Model.InvoiceLines.ElementAt(i).TaxPercentage" oninput="calculateAmount(this)" />
                                    <input type="hidden" name="InvoiceLines[@i].TaxAmount" class="form-control" value="@Model.InvoiceLines.ElementAt(i).TaxAmount" />
                                    <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[@i].TaxAmount" data-valmsg-replace="true"></span>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    @* <label asp-for="@Model.InvoiceLines.ElementAt(i).Amount" class="control-label"></label> *@
                                    <input name="InvoiceLines[@i].Amount" class="form-control" value="@Model.InvoiceLines.ElementAt(i).Amount" readonly />
                                    <span asp-validation-for="@Model.InvoiceLines.ElementAt(i).Amount" class="text-danger"></span>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <!-- Remove button -->
                                    <button type="button" class="btn btn-outline-danger" onclick="removeTradingDocumentDetail(this)">
                                        <i class="bi bi-trash"></i>
                                    </button>

                                </div>
                            </td>

                        </tr>
                    }
                    <div id="live-region" aria-live="polite" style="position: absolute; left: -9999px;"></div>

                </tbody>
            </table>

        </div>
    </div>
    @* --line code --- *@
    <div class="mb-3">
        <div class="row">
            <div id="InvoiceLinesContainer">
                <!-- Placeholder for dynamically added rows -->
            </div>
            <div class="col text-start">
                <button type="button" class="btn btn-primary" onclick="addTradingDocumentDetail()">Add Row </button>
            </div>
        </div>
    </div>
    <div class="mt-5 p-4 bg-light rounded shadow">
        <div class="row mb-3">
            <div class="col text-end">
                <h5 class="fw-bold text-secondary">Subtotal: <span id="subtotalAmount">0.00</span></h5>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col text-end">
                <h5 class="fw-bold text-secondary">Untaxed Amount: <span id="UntaxedAmount">0.00</span></h5>
            </div>
        </div>
        <div class="row">
            <div class="col text-end">
                <h5 class="fw-bold text-secondary">Total: <span id="grandTotalAmount">0.00</span></h5>
            </div>
        </div>
    </div>





</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>



@section Scripts {
    <script>

        function updateUnitPrice(selectElement) {
            // Retrieve the value of the selected item and its attributes
            var selectedItemId = selectElement.value;
            var selectedItem = selectElement.options[selectElement.selectedIndex];
            var unitPrice = selectedItem.dataset.price;
            var saleUnit = selectedItem.dataset.saleunit;

            // Find the row that contains the select element
            var rowElement = selectElement.closest('tr');

            // Find the corresponding input and span elements within the same row
            if (rowElement) {
                var unitPriceInputElement = rowElement.querySelector('input[name$=".UnitPrice"]');
                var saleUnitSpanElement = rowElement.querySelector('span[name$=".Item.SaleUnitNavigation.Symbol"]');

                if (unitPriceInputElement) {
                    unitPriceInputElement.value = unitPrice;
                }
                if (saleUnitSpanElement) {
                    saleUnitSpanElement.innerText = saleUnit;
                }
            }

            // Call the calculateAmount function to update totals, pass the row element if needed
            calculateAmount(rowElement);
        }

        function initializeValidation() {
            $('form').removeData('validator');
            $('form').removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse('#tradingForm');
            // Initialize jQuery validation
            var validator = $('form').validate();

            // Log the validator object
            console.log(validator);
        }
        function validateAtLeastOneLine() {
            var hasAtLeastOneLine = false;

            // Loop through each row in InvoiceLines and check if any input has a value
            $('#tradingLinesTable tbody tr').each(function () {
                $(this).find('input, select, textarea').each(function () {
                    if ($(this).val().trim() !== "") {
                        hasAtLeastOneLine = true;
                        return false; // Break the loop if we find a populated field
                    }
                });
                if (hasAtLeastOneLine) return false; // Exit the outer loop if one line is valid
            });

            if (!hasAtLeastOneLine) {
                // Show an error message if no line items are filled in
                $('#resultContainer').html('<div class="alert alert-danger">Please add at least one line item.</div>');
                return false; // Prevent form submission
            }

            // Clear any previous error message if validation passes
            $('#resultContainer').html('');
            return true;
        }
        function submitForm() {
            initializeValidation();
            $.validator.unobtrusive.parse(".target");
            $("#tradingForm").removeData("validator").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("#tradingForm");

            // Access the validator object
            var validator = $('#tradingForm').validate();

            $('input[name^="InvoiceLines["][name$="].UnitPrice"]').each(function (index) {
                var fieldName = $(this).attr('name');
                // Ensure that the rules object exists for the current input field
                if (!validator.settings.rules[fieldName]) {
                    validator.settings.rules[fieldName] = {}; // Create rules object if it doesn't exist
                }
                // Add new validation rules
                validator.settings.rules[fieldName]['required'] = true;
                // Add more validation rules as needed

                // Optionally, add messages for the new validation rules
                validator.settings.messages[fieldName] = {
                    required: "Please enter a value for Unit Price"// Custom message for required rule
                    // Add more messages as needed
                };
            });
            $('input[name^="InvoiceLines["][name$="].Quantity"]').each(function (index) {
                var fieldName = $(this).attr('name');

                // Ensure that the rules object exists for the current input field
                if (!validator.settings.rules[fieldName]) {
                    validator.settings.rules[fieldName] = {}; // Create rules object if it doesn't exist
                }

                // Add new validation rules for Quantity
                validator.settings.rules[fieldName]['required'] = true; // Field must not be empty

                // Add messages for the new validation rules
                validator.settings.messages[fieldName] = {
                    required: "Quantity is required." // Custom message for required rule
                };
            });

            // Validate Discount Percentage fields
            $('input[name^="InvoiceLines["][name$="].DiscountPercentage"]').each(function (index) {
                var fieldName = $(this).attr('name');

                // Ensure that the rules object exists for the current input field
                if (!validator.settings.rules[fieldName]) {
                    validator.settings.rules[fieldName] = {}; // Create rules object if it doesn't exist
                }

                // Add new validation rules for Discount Percentage
                validator.settings.rules[fieldName]['range'] = [0, 100]; // Must be between 0 and 100

                // Add messages for the new validation rules
                validator.settings.messages[fieldName] = {
                    range: "Discount Percentage must be between 0 and 100." // Custom message for range validation
                };

            });

           

            // Validate Discount Percentage fields
            $('input[name^="InvoiceLines["][name$="].TaxPercentage"]').each(function (index) {
                var fieldName = $(this).attr('name');

                // Ensure that the rules object exists for the current input field
                if (!validator.settings.rules[fieldName]) {
                    validator.settings.rules[fieldName] = {}; // Create rules object if it doesn't exist
                }

                // Add new validation rules for Discount Percentage
                validator.settings.rules[fieldName]['range'] = [0, 100]; // Must be between 0 and 100

                // Add messages for the new validation rules
                validator.settings.messages[fieldName] = {
                    range: "Discount Percentage must be between 0 and 100." // Custom message for range validation
                };

            });
            // Manually trigger client-side validation
            if (validateForm()) {
                // If validation passes, proceed with form submission
                document.getElementById('tradingForm').submit();
            }

        }
        document.addEventListener('DOMContentLoaded', function () {

            var resetButton = document.getElementById('resetToDraftButton');
            var saveDraftButton = document.getElementById('saveDraftButton');
            var saveButton = document.getElementById('saveButton');
            var tradingForm = document.getElementById('tradingForm');
            var docStatusElement = document.getElementById('DocStatusInput');




            // Save Draft
            if (saveDraftButton) {
                saveDraftButton.addEventListener('click', function () {
                    // form treat as Draft
                    docStatusElement.value = DocumentStatus.Draft;
                    // Submit the form for saving draft
                    submitForm();
                });
            }

            // Finalize
            if (saveButton) {
                saveButton.addEventListener('click', function () {
                    // form treat as Finailze
                    docStatusElement.value = DocumentStatus.Finalized;
                    // Submit the form for finalizing
                    submitForm();
                });
            }

            // Reset to Draft
            if (resetButton) {

                resetButton.addEventListener('click', function () {
                    event.preventDefault(); // Prevent the form from submitting normally

                    var invoiceId = @(Model?.Id ?? 0);

                    // Make an AJAX PUT request to reset the invoice status to draft
                    fetch(`/Invoices/${invoiceId}/reset-draft`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Required for ValidateAntiForgeryToken
                        }
                    })
                        .then(response => {
                            if (response.ok) {
                                // Show success alert in a div and refresh the page after a short delay
                                $('#resultContainer').html('<div class="alert alert-success">Reset to draft successfully!</div>');

                                //Refresh page after 1 seconds
                                setTimeout(() => {
                                    location.reload();
                                }, 1000);
                            } else if (response.status === 400) {
                                // Handle validation errors, display them inside a div
                                return response.json().then(data => {
                                    debugger;
                                    $('#resultContainer').html(
                                        `<div class="alert alert-danger">Validation Errors: ${data.errors}</div>`
                                    );
                                });
                            } else {
                                // Handle other non-success status codes, show an alert div
                                $('#resultContainer').html('<div class="alert alert-danger">An unexpected error occurred.</div>');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            // Display a general error message in case of a network error or other exceptions
                            $('#resultContainer').html('<div class="alert alert-danger">An error occurred while resetting the invoice.</div>');
                        });;
                });

            }



        });
        function validateForm() {
            return $('#tradingForm').valid() && validateAtLeastOneLine(); 
        }
        // Global variable to keep track of the current index

        var currentIndex = @(Model?.InvoiceLines.Count ?? 0);

        // calculate at Edit View Load
        calculateGrandTotal();

        // JavaScript function to add a new row for InvoiceLines

        function addTradingDocumentDetail() {
            var tableBody = document.querySelector('#tradingLinesTable tbody');

            // Create a new row
            var newRow = document.createElement('tr');
            newRow.id = `row-${currentIndex}`;
            newRow.tabIndex = 0; // Allow keyboard navigation


            // Add event listeners to the new row for drag and drop operations
            newRow.addEventListener('dragover', allowDrop);
            newRow.addEventListener('drop', drop);
            newRow.addEventListener('dragleave', dragLeave);

            newRow.innerHTML = `
                                                                         <td>
                                                                            <div class="form-group">
                                                                                <!-- Drag handle button at the start of the row -->
                                                                                 <button type="button" class="btn btn-outline-secondary no-outline drag-handle"
                                                                                        draggable="true"
                                                                                        ondragstart="drag(event)"
                                                                                        ondragend="dragEnd()"
                                                                                        aria-label="Drag to move row">
                                                                                    <i class="bi bi-grip-vertical"></i>
                                                                                </button>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <div class="form-group">
                                                                                <select name="InvoiceLines[${currentIndex}].ItemId" class="form-control" onchange="updateUnitPrice(this)">
                                                                                    <option value="">-- Select Item --</option>
        @foreach (var item in (IEnumerable<Item>)ViewData["Item"])
        {
                                                                                                                        <option data-price="@item.Price" data-SaleUnitId="@item.SaleUnit" data-SaleUnit="@item.SaleUnitNavigation.Symbol" value="@item.Id">@item.Name</option>
        }
                                                                                </select>
                                                                                <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[${currentIndex}].ItemId" data-valmsg-replace="true"></span>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <div class="form-group">
                                                                                <input name="InvoiceLines[${currentIndex}].Description" class="form-control" />
                                                                                <span asp-validation-for="InvoiceLines[${currentIndex}].Description" class="text-danger"></span>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <div class="input-group">
                                                                                        <input name="InvoiceLines[${currentIndex}].UnitPrice" class="form-control" oninput="calculateAmount(this)" />
                                                                                <span class="input-group-text" name="InvoiceLines[${currentIndex}].Item.SaleUnitNavigation.Symbol"></span>
                                                                            </div>
                                                                                <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[${currentIndex}].UnitPrice" data-valmsg-replace="true"></span>
                                                                        </td>
                                                                        <td>
                                                                            <div class="form-group">
                                                                                        <input name="InvoiceLines[${currentIndex}].Quantity" class="form-control" oninput="calculateAmount(this)" />
                                                                               
                                                                            <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[${currentIndex}].Quantity" data-valmsg-replace="true"></span>
                                                                            </div>
                                                                        </td>
                                                                         <td>
                                                                            <div class="form-group">
                                                                                        <input name="InvoiceLines[${currentIndex}].DiscountPercentage" value="0" class="form-control" oninput="calculateAmount(this)" />
                                                                                <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[${currentIndex}].DiscountPercentage" data-valmsg-replace="true"></span>
                                                                                <span asp-validation-for="InvoiceLines[${currentIndex}].DiscountPercentage" class="text-danger"></span>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <div class="form-group">
                                                                                        <input name="InvoiceLines[${currentIndex}].TaxPercentage" value="0" class="form-control" oninput="calculateAmount(this)" />
                                                                                <input type="hidden" name="InvoiceLines[${currentIndex}].TaxAmount" class="form-control"  />
                                                                                <span class="text-danger field-validation-valid" data-valmsg-for="InvoiceLines[${currentIndex}].TaxPercentage" data-valmsg-replace="true"></span>
                                                                                <span asp-validation-for="InvoiceLines[${currentIndex}].TaxPercentage" class="text-danger"></span>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <div class="form-group">
                                                                                <input name="InvoiceLines[${currentIndex}].Amount" class="form-control" readonly />
                                                                                <span asp-validation-for="InvoiceLines[${currentIndex}].Amount" class="text-danger"></span>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <div class="form-group">
                                                                                <!-- Remove button -->
                                                                                <button type="button" class="btn btn-outline-danger" onclick="removeTradingDocumentDetail(this)">
                                                                                    <i class="bi bi-trash"></i>
                                                                                </button>
                                                                            </div>
                                                                        </td>
                                                                    `;

            // Append the new row to the table body
            tableBody.appendChild(newRow);

            // Increment the index for the next row
            currentIndex++;
        }


        // JavaScript function to remove a row for InvoiceLines
        function removeTradingDocumentDetail(button) {
            var row = button.parentNode.parentNode.parentNode;
            row.parentNode.removeChild(row);

            calculateGrandTotal();
        }

        // Function to calculate Amount based on UnitPrice and Quantity
        function calculateAmount(element) {

            // Find the row that contains the element that triggered the change
            const rowElement = element.closest('tr');

            const unitPriceElement = rowElement.querySelector('input[name$=".UnitPrice"]');
            const quantityElement = rowElement.querySelector('input[name$=".Quantity"]');
            const discountElement = rowElement.querySelector('input[name$=".DiscountPercentage"]');
            const taxElement = rowElement.querySelector('input[name$=".TaxPercentage"]');
            const amountElement = rowElement.querySelector('input[name$=".Amount"]');

            const unitPrice = parseFloat(unitPriceElement?.value) || 0;
            const quantity = parseFloat(quantityElement?.value) || 0;
            const discount = parseFloat(discountElement?.value) || 0;
            const taxPercentage = parseFloat(taxElement?.value) || 0;

            // Calculate the total before discount
            let amount = unitPrice * quantity;
            // Apply discount percentage
            let discountedAmount = amount - (amount * (discount / 100));
            amountElement.value = discountedAmount.toFixed(2);

            calculateGrandTotal();
        }


        // Calculate and display the grand total
        function calculateGrandTotal() {
            var grandTotal = 0;
            var subTotal = 0;
            var untaxedAmount = 0;
            // Iterate through each row in the table
            var rows = document.querySelectorAll('#tradingLinesTable tbody tr');
            rows.forEach(function (row) {
                // Get the amount input element in the current row
                var amountInput = row.querySelector('input[name^="InvoiceLines["][name$="].Amount"]');
                var discountPercentageInput = row.querySelector('input[name^="InvoiceLines["][name$="].DiscountPercentage"]');
                var taxPercentageInput = row.querySelector('input[name^="InvoiceLines["][name$="].TaxPercentage"]');
                var discountPercentage = parseFloat(discountPercentageInput.value) || 0;
                var taxPercentage = parseFloat(taxPercentageInput.value) || 0;


                var amount = parseFloat(amountInput.value) || 0;

                var taxAmount = amount / 100 * taxPercentage;


                var subTotalLine = amount / (100 - discountPercentage) * 100;

                // Accumulate the amount to the grand total
                subTotal += subTotalLine;
                untaxedAmount += amount;
                grandTotal += taxAmount + amount;
            });

            // Display the grand total
            var CurrencyElement = document.getElementById('Currency');
            var grandTotalElement = document.getElementById('grandTotalAmount');
            if (grandTotalElement) {
                grandTotalElement.textContent = formatNumberWithCommas(grandTotal.toFixed(2)) + '/- ' + CurrencyElement.value; // Format the total with two decimal places
            }
            var subtotalAmountElement = document.getElementById('subtotalAmount');

            if (subtotalAmountElement) {
                subtotalAmountElement.textContent = formatNumberWithCommas(subTotal.toFixed(2)) + '/-  ' + CurrencyElement.value; // Format the total with two decimal places
            }
            var untaxedAmountElement = document.getElementById('UntaxedAmount');

            if (untaxedAmountElement) {
                untaxedAmountElement.textContent = formatNumberWithCommas(untaxedAmount.toFixed(2)) + '/-  ' + CurrencyElement.value; // Format the total with two decimal places
            }
        }


        // Check if the URL contains "/Create/0" to add the first row
        if (window.location.href.includes("/Create/0") && $('#tradingLinesTable tbody tr').length === 0) {
            // Add first row only if the table is empty
            addTradingDocumentDetail();
        }

        function formatNumberWithCommas(number) {
            return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
    </script>


    @*   <script src="~/Scripts/jquery.js"></script>
    <script src="~/Scripts/jquery.validation.js"></script>
    <script src="~/Scripts/jquery.validation.unobtrusive.js"></script> *@

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}



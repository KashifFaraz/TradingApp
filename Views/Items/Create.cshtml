@model TradingApp.Models.Item
@{
    ViewData["Title"] = "Create";
}

<h1>Create </h1>

<h4>Item</h4>
<hr />
<style>
    #imagePreviewContainer .card {
        border: 1px solid #ddd;
        padding: 5px;
        border-radius: 5px;
    }

        #imagePreviewContainer .card img {
            max-height: 150px;
            object-fit: cover;
        }


    .imagePreviewContainer .card {
        border: 1px solid #ddd;
        padding: 5px;
        border-radius: 5px;
    }

        .imagePreviewContainer .card img {
            max-height: 150px;
            object-fit: cover;
        }


    /* Overlay Styling */
    .overlay {
        background: rgba(0, 0, 0, 0.6);
        display: none; /* Initially hidden */
        justify-content: center; /* Center content horizontally */
        align-items: center; /* Center content vertically */
        z-index: 1;
        transition: opacity 0.3s;
    }

    /* Show Overlay on Hover (ONLY if active class is applied) */
    .thumbnail-frame:hover .overlay.active {
        display: flex;
    }

    /* Thumbnail Frame Styling */
    .thumbnail-frame {
        width: 150px;
        height: 150px;
        border: 1px solid #ccc;
        background-color: #f0f0f0;
        cursor: pointer;
        overflow: hidden;
        position: relative;
    }

        .thumbnail-frame img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    /* Button Alignment */
    .overlay-buttons button {
        margin: 0 5px;
        z-index: 3;
    }

</style>
<form asp-action="@(Model?.Id > 0 ? "Edit" : "Create")" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <div class="row">

        <div class="col-md-4">

            <input type="hidden" name="IsOnboarding" value="@ViewBag.IsOnboarding.ToString().ToLower()" />
            <div asp-validation-summary="All" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Code" class="control-label"></label>
                <input asp-for="Code" class="form-control" />
                <span asp-validation-for="Code" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ProductBrandId" class="control-label"></label>
                @Html.DropDownListFor(model => model.ProductBrandId, (SelectList)ViewData["ProductBrand"], "-- Select Product Brand --", new { @class = "form-control" })
                <span asp-validation-for="ProductBrandId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ProductCategoryId" class="control-label"></label>
                @Html.DropDownListFor(model => model.ProductCategoryId, (SelectList)ViewData["ProductCategory"], "-- Select Product Category --", new { @class = "form-control" })
                <span asp-validation-for="ProductCategoryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Color" class="control-label"></label>
                @Html.DropDownListFor(model => model.Color, new SelectList(new[] {
                "", "Red", "Green", "Blue", "Yellow", "Black", "White", "Pink", "Purple", "Orange", "Gray"
                }, "-- Select Color --"), new { @class = "form-control" })
                <span asp-validation-for="Color" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Material" class="control-label"></label>
                <input asp-for="Material" class="form-control" />
                <span asp-validation-for="Material" class="text-danger"></span>
            </div>


            <div class="form-group">
                <label asp-for="Size" class="control-label"></label>
                <input asp-for="Size" class="form-control" />
                <span asp-validation-for="Size" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Length" class="control-label"></label>
                <input asp-for="Length" class="form-control" />
                <span asp-validation-for="Length" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Width" class="control-label"></label>
                <input asp-for="Width" class="form-control" />
                <span asp-validation-for="Width" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Height" class="control-label"></label>
                <input asp-for="Height" class="form-control" />
                <span asp-validation-for="Height" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Weight" class="control-label"></label>
                <input asp-for="Weight" class="form-control" />
                <span asp-validation-for="Weight" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SaleUnit" class="control-label"></label>
                @Html.DropDownListFor(model => model.SaleUnit, (SelectList)ViewData["SaleUnits"], "-- Select Sale Unit --", new { @class = "form-control" })
                <span asp-validation-for="SaleUnit" class="text-danger"></span>
            </div>


           
            <!-- Button to add more media -->
            <div class="form-group mt-3">
                <button type="button" class="btn btn-secondary" onclick="addMoreMedia()">Add Media</button>
            </div>
            <!-- Container to display selected images -->
            <div id="imagePreviewContainer" class="row mt-3 imagePreviewContainer">
                @{
                    var mediaAssets = Model.ProductMediaAssets?.Split(',') ?? new string[0];
                    var i = 0;
                }
                @foreach (var filePath in mediaAssets)
                {
                    var extension = System.IO.Path.GetExtension(filePath).ToLower();

                    if (extension == ".jpg" || extension == ".jpeg" || extension == ".png")
                    {
                        <div class="col-md-3 mb-3 text-center">
                            <div class="card">
                                <img src="@filePath" class="card-img-top" alt="Uploaded Image" />
                               
                                <div class="card-body">
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteMedia('@filePath',event )">Delete</button>
                                </div>
                            </div>
                        </div>
                    }
                    i++;
                }
            </div>

            <div class="row mt-3 imagePreviewContainer">
            </div>

            <div class="form-group">
                <input type="submit" value="@(Model?.Id > 0 ? "Update" : "Create")" class="btn btn-primary" />
            </div>

        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label class="control-label">Thumbnail</label>
                <div class="media-component">
                    <!-- Thumbnail Frame -->
                    <div class="thumbnail-frame position-relative" id="thumbnailFrame" onclick="triggerUploadIfEmpty()">
                        <!-- Default or Uploaded Image -->
                        <img id="thumbnailImage"
                             src="@(string.IsNullOrEmpty(Model?.Thumbnail) ? "/logo/placeholder.jpg" : "data:image/jpeg;base64," + Model?.Thumbnail)"
                             alt="Default Thumbnail"
                             class="img-fluid rounded" />



                        <!-- Buttons Overlay -->
                        <div class="overlay position-absolute top-0 start-0 w-100 h-100 d-none" id="thumbnailOverlay">
                            <div class="overlay-buttons d-flex justify-content-center align-items-center h-100">
                                <!-- Edit Button -->
                                <button class="btn btn-warning btn-sm me-2" id="editButton" onclick="changeImage(event)">
                                    <i class="bi bi-pencil"></i> <!-- Edit Icon -->
                                </button>
                                <!-- Delete Button -->
                                <button class="btn btn-danger btn-sm" id="deleteButton" type="button" onclick="deleteImage(event,@Model?.Id)">
                                    <i class="bi bi-trash"></i> <!-- Delete Icon -->
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <input type="file" id="thumbnailFile" style="display:none;" onchange="updateThumbnail(event)" />
            </div>

        </div>

    </div>
</form>
<div>
    <a asp-action="Index">Back to List</a>
</div>
<script>
    var itemId = @(Model?.Id ?? 0)
           window.onload = function() {
        const thumbnail = document.getElementById('thumbnailImage');
        const overlay = document.getElementById('thumbnailOverlay');

        // Check if there is an existing thumbnail
        if (!thumbnail.src.includes("/logo/placeholder.jpg")) {
            // If a thumbnail exists, show the overlay and buttons
            overlay.classList.remove('d-none');
            overlay.classList.add('active');
        }
    };

    function triggerUploadIfEmpty() {
        const thumbnail = document.getElementById('thumbnailImage');
        const isDefaultImage = thumbnail.src.includes('placeholder.jpg'); // Check if it's the default image
        if (isDefaultImage) {
            openUploadDialog(); // Trigger file upload dialog
        }
    }

    function openUploadDialog() {
        const fileInput = document.getElementById('thumbnailFile');
        fileInput.click(); // Open the file input dialog
    }

    function updateThumbnail(event) {
        const file = event.target.files[0];
        if (file && file.type.startsWith('image/')) { // Ensure the file is an image
            const reader = new FileReader();
            reader.onload = function (e) {
                const thumbnail = document.getElementById('thumbnailImage');
                const overlay = document.getElementById('thumbnailOverlay');

                // Update the thumbnail with the uploaded image
                thumbnail.src = e.target.result;

                // Activate the overlay and allow hover functionality
                overlay.classList.add('active'); // Add active class
                overlay.classList.remove('d-none'); // Ensure overlay is visible

                // Create FormData to send to the server
                const formData = new FormData();
                formData.append('thumbnailFile', file); // Append the file to FormData

                // Make the API call to upload the thumbnail
                fetch(`/items/${itemId}/logo`, {
                    method: 'PUT', // Use PUT for updating
                    body: formData,
                     headers: {

        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Extract token
    },
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to upload image');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Thumbnail updated successfully', data);
                })
                .catch(error => {
                    console.error('Error uploading thumbnail:', error);
                });
            };
            reader.readAsDataURL(file); // Convert the file to a data URL
        }
    }

      function deleteImage(event, itemId) {
        event.stopPropagation(); // Prevent parent event propagation

        const thumbnail = document.getElementById('thumbnailImage');
        const overlay = document.getElementById('thumbnailOverlay');
        const fileInput = document.getElementById('thumbnailFile');

        // Check if the item has an image to delete (if not, skip deletion)
        if (thumbnail.src !== '/logo/placeholder.jpg') {
            // Reset thumbnail to the default placeholder image
            thumbnail.src = '/logo/placeholder.jpg';

            // Hide the overlay and disable hover functionality
            overlay.classList.remove('active'); // Remove hover functionality
            overlay.classList.add('d-none'); // Hide the overlay

            // Reset the file input to allow re-upload of the same file
            fileInput.value = ''; // Clear file input value

            // Make the DELETE API call to delete the image
            fetch(`/items/${itemId}/logo`, {
                method: 'DELETE',
                headers: {
        'Content-Type': 'application/json',
        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Extract token
    },
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete image');
                }
                return response.json();
            })
            .then(data => {
                console.log('Thumbnail deleted successfully', data);

                // Optionally, show a success message to the user
                alert('Thumbnail deleted successfully!');
            })
            .catch(error => {
                console.error('Error deleting thumbnail:', error);

                // Optionally, show an error message to the user
                alert('Failed to delete thumbnail. Please try again.');
            });
        } else {
            alert('No image to delete.');
        }
    }


    function changeImage(event) {
        event.stopPropagation(); // Prevent parent event propagation
        openUploadDialog(); // Open the file input dialog again
    }

    function updateLogo(itemId) {
        var formData = new FormData();
        var fileInput = document.getElementById('thumbnailFile'); // Assuming your file input has the ID 'thumbnailFile'
        var file = fileInput.files[0];

        if (file) {
            formData.append('thumbnailFile', file);

            fetch(`/Items/${itemId}/logo`, {
                method: 'PUT',
                body: formData,
            })
            .then(response => {
                if (response.ok) {
                    alert("Logo updated successfully.");
                    location.reload(); // Reload to reflect changes
                } else {
                    alert("Error updating logo.");
                }
            });
        } else {
            alert("Please select a file to upload.");
        }
    }








   

    function editMedia(index) {
        // Create a hidden file input to select a new image
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*';

        // Trigger the file input dialog
        fileInput.click();

        // Handle the new file selection
        fileInput.onchange = function (event) {
            const file = event.target.files[0]; // Get the selected file
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Update the file in the currentFiles array
                    currentFiles[index] = file;

                    // Find the image element for the selected index and update its src attribute
                    const container = document.getElementById('imagePreviewContainer');
                    const imageElement = container.children[index].querySelector('img');
                    imageElement.src = e.target.result; // Update the image preview
                };

                reader.readAsDataURL(file); // Read the new image file as a data URL
            }
        };
    }



       function deleteMedia(mediaPath, event) {
        // Prevent any default actions (if needed)
        event.stopPropagation();

        // Get the button (or any element) that triggered the event
        const deleteButton = event.target;

        // Find the parent container of the clicked button (e.g., the card container)
        const imageWrapper = deleteButton.closest('.col-md-3');

        if (imageWrapper) {
            // Remove the image wrapper from the DOM
            imageWrapper.remove();
        }

        // Call the API to delete the media from the server, if mediaPath is provided
        if (mediaPath) {
            deleteMediaFromServer(mediaPath, itemId);
        }
    }

     // Function to delete the media from the server (via API)
    async function deleteMediaFromServer(mediaPath,itemId) {
       
         const encodedMediaPath = encodeURIComponent(mediaPath); // URL encode the path
        const response = await fetch(`/Items/${itemId}/Media?mediaPath=${encodedMediaPath}`, {
                method: 'DELETE',
                headers: {
        'Content-Type': 'application/json',
        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Extract token
    },
            })

        if (response.ok) {
            console.log('Media deleted successfully');
        } else {
            console.error('Failed to delete media');
        }
    }


    async function uploadSingleImage(file, index) {
        const formData = new FormData();
        formData.append('productMediaAssets', file);

        try {
            const response = await fetch(`/Items/${itemId}/Media`, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
            });

            if (response.ok) {
                const result = await response.json();

                // Update progress bar and enable delete button
                const progressBar = document.getElementById(`progress-${index}`);
                const progressBarContainer = document.getElementById(`progress-Container-${index}`);
                progressBar.style.width = '100%';
                const container = document.getElementById('imagePreviewContainer');
                const deleteButton = container.children[index].querySelector('button');
                deleteButton.disabled = false;

                // Append server path for the newly uploaded image
                const newFilePath = result.newMediaPaths; // Assuming server returns the uploaded file path
                container.children[index].querySelector('img').src = newFilePath;

                // Update the delete button to include the file path
                deleteButton.setAttribute('onclick', `deleteMedia('${newFilePath}',event)`);

                  // Hide progress bar after 1 second
                setTimeout(() => {
                    progressBarContainer.style.opacity = '0'; // Smoothly fade out
                    setTimeout(() => {
                        progressBarContainer.style.display = 'none'; // Hide completely after fade-out
                    }, 500); // Allow fade-out animation to complete
                }, 1000);
                console.log('Image uploaded successfully:', newFilePath);
            } else {
                alert('Failed to upload image. Please try again.');
                document.getElementById(`progress-${index}`).style.width = '0%';
            }
        } catch (error) {
            console.error('Error uploading image:', error);
            alert('An error occurred while uploading the image.');
        }
    }

    function addMoreMedia() {
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*';
        fileInput.multiple = true;

        fileInput.click();

        fileInput.onchange = function (event) {
            const files = Array.from(event.target.files);

            if (files.length > 0) {
                const container = document.getElementById('imagePreviewContainer');

                files.forEach((file, index) => {
                    const reader = new FileReader();

                    reader.onload = function (e) {
                        const imageWrapper = document.createElement('div');
                        imageWrapper.classList.add('col-md-3', 'mb-3', 'text-center');
                        imageWrapper.innerHTML = `
                            <div class="card">
                                <img src="${e.target.result}" class="card-img-top" alt="Uploading Image" />
                                <div class="progress mt-2" id="progress-Container-${container.children.length}">
                                    <div class="progress-bar" role="progressbar" style="width: 20%;" id="progress-${container.children.length}"></div>
                                </div>
                                <div class="card-body">
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteMedia(${container.children.length}, event )" disabled>Delete</button>
                                </div>
                            </div>`;
                        container.appendChild(imageWrapper);

                        // Start uploading the image
                        uploadSingleImage(file, container.children.length - 1);
                    };

                    reader.readAsDataURL(file);
                });
            }
        };
    }



     


</script>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

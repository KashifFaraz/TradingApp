@using TradingApp.Utility;
@using static TradingApp.Utility.Constants;
@model CustomerDuesViewModel;


@{
    ViewData["Title"] = "CustomerDues";
}



@* <div class="row">
    <div class="col-sm-1">
    </div>
    <div class="col-sm-10">
        <h2 class="text-center">@Model.Organization?.Name</h2>
        <h5 class="text-center">Invoice</h5>
    </div>
    <div class="col-sm-1">
        <img style="    max-width: 100px;" src="@Model.Organization?.LogoUrl" alt="Company Logo">

    </div>
</div> *@
<div>
    <h2>Customer Dues</h2>
    <p><strong>Name:</strong> @Model.Stakeholder.Name</p>
    <p>
        <strong> @Html.DisplayNameFor(model => model.TotalReceivable):</strong>
        @Html.DisplayFor(model => model.TotalReceivable)
    </p>

    <p>
        <strong> @Html.DisplayNameFor(model => model.UnreconciledPaymentAmount):</strong>
        @Html.DisplayFor(model => model.UnreconciledPaymentAmount)
    </p>
    
</div>

<div>
    <h2>Invoices</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Invoice ID</th>
                <th>Reconciliation Status</th>
                <th>Amount</th>
                <th>Paid Amount</th>
                <th>Unpaid Amount</th>
                <th>Due Date</th>
                <!-- Add more invoice columns as needed -->
            </tr>
        </thead>
        <tbody>
            @foreach (var invoice in Model.Invoices)
            {
                <tr>
                    <td>@invoice.Id</td>
                    <td>

                        @{
                            var status = EnumExtensions.GetEnumDisplayName < PaymentReconciliationStatus > 
                            (invoice.PaymentReconciliationStatus);
                        }
                        @status
                    </td>
                    <td> @Html.DisplayFor(modelItem => invoice.TotalAmount)</td>
                    <td>
                        @Html.DisplayFor(modelItem => invoice.TotalPaid)
                        @* @((invoice.TotalAmount - invoice.UnreconciledAmount).Value.ToString("F2")) *@
                    </td>
                    <td> @Html.DisplayFor(modelItem => invoice.UnreconciledAmount)</td>


                    <td>
                        @if (invoice.DueDate.HasValue)
                        {
                            @invoice.DueDate.Value.ToString("d")
                        }
                        else
                        {
                            <span>N/A</span> <!-- or any placeholder text you prefer -->
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
<script>
   
    function formatNumberWithCommas(number) {
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
</script>
}
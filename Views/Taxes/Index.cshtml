@using TradingApp.Utility;
@using static TradingApp.Utility.Constants;
@model IEnumerable<TradingApp.Models.Tax>

@{
    ViewData["Title"] = "Index";
    Layout = null;
}


<p>
    <a href="#" id="createButton" class="btn btn-primary btn-lg shadow-sm">
        <i class="fas fa-plus-circle"></i> Create New
    </a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ComputationType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Value)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @* @Html.DisplayFor(modelItem => item.ComputationType) *@

                    @{
                        var ComputationTypeName = EnumExtensions.GetEnumDisplayName<ComputationType>(item.ComputationType);
                    }
                    @Html.DisplayFor(modelItem => ComputationTypeName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Value)
                </td>

                <td>
                    <a href="#" class="editButton" data-id="@item.Id">Edit  ✐</a> |
                    <a href="#" class="deleteRecordLink" data-id="@item.Id">Delete ❌</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    $(document).ready(function () {

        // Reusable function for AJAX GET request
        function loadContent(url, targetElement) {
            $('.tabData').html(''); // Clear tab data before each request
            $.get(url)
                .done(function (data) {
                    $(targetElement).html(data); // Load content into the target element
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    console.error("Request failed: " + textStatus + ", " + errorThrown);
                    //$(targetElement).html(jqXHR.responseText); // Show error message in the target element
                    $(targetElement).html('<p>Error loading content. Please try again later.</p>');
                });
        }

        // Function to handle button clicks
        function setupClickHandler(selector, urlGenerator) {
            $(selector).click(function (e) {
                e.preventDefault();
                var url = urlGenerator($(this).data('id')); // Generate URL using provided function
                loadContent(url, '#SettingContent'); // Use reusable function to load content
            });
        }

        // Set up handlers for different buttons
        setupClickHandler('#createButton', function () {
            return '/Taxes/Create'; // URL for create button
        });

        setupClickHandler('.deleteRecordLink', function (id) {
            return '/Taxes/Delete/' + id; // URL for delete button with record ID
        });

        setupClickHandler('.editButton', function (id) {
            return '/Taxes/Create/' + id; // URL for edit button with record ID
        });
    });
</script>

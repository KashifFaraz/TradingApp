@using System.Globalization;
@using TradingApp.Utility;
@using TradingApp.ViewModels;
@using static TradingApp.Utility.Constants;
@model PaginatedList<TradingApp.Models.Invoice>


@{
    ViewData["Title"] = "Invoice";

}

<h1>Invoice List</h1>

<p>
    <a class="btn btn-primary btn-lg shadow-sm" asp-action="Create" asp-route-id="0">
        <i class="fas fa-plus-circle"></i> New
    </a>
</p>




<div class="container mt-4">
    <form method="get">
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <label for="Id" class="col-form-label">Id</label>
                <input type="text" class="form-control" id="Id" name="filters[0].Value" />
                <input type="hidden" name="filters[0].PropertyName" value="Id" />
                <input type="hidden" name="filters[0].Operation" value="Equals" />
            </div>

            <div class="col-auto">
                <label for="DocDate" class="col-form-label">Doc Date</label>
                <input type="date" class="form-control" id="DocDate" name="filters[1].Value" />
                <input type="hidden" name="filters[1].PropertyName" value="DocDate" />
                <input type="hidden" name="filters[1].Operation" value="Equals" />
            </div>

            <div class="col-auto">
                <label for="StakeholderId" class="col-form-label">Stakeholder Id</label>
                <input type="text" class="form-control" id="StakeholderId" name="filters[2].Value" />
                <input type="hidden" name="filters[2].PropertyName" value="StakeholderId" />
                <input type="hidden" name="filters[2].Operation" value="Equals" />
            </div>

            <div class="col-auto align-self-end">
                <button type="submit" class="btn btn-primary">Apply Filter</button>
            </div>
        </div>
    </form>




    <div class="mt-3" id="appliedFilters">
        <!-- Applied filters will appear here as badges -->
    </div>
</div>


<div class="container mt-4">
    <div class="mt-3" id="appliedFilters">
        <!-- Applied filters will appear here as badges -->
    </div>
</div>
<!-- Column Visibility Controls -->




    <table id="invoiceTable" class="table resizable-table ShowHideColumnTable table-bordered rounded">
        <thead class="bg-light">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.First().Id)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().StakeholderId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().DocDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().DueDate)

                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().SubTotal)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().TotalAmount)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().PaymentReconciliationStatus)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.First().DocStatus)
                </th>




                <th class="text-end">
                    <div class="dropdown mb-3">
                        <button class="btn" type="button" id="columnVisibilityDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-three-dots-vertical"></i>
                        </button>
                        <ul class="dropdown-menu p-3 m-2" aria-labelledby="columnVisibilityDropdown">
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnId" data-column="0" checked />
                                    <label class="form-check-label" for="columnId">ID</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnStakeholder" data-column="1" checked />
                                    <label class="form-check-label" for="columnStakeholder">Stakeholder</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnDocDate" data-column="2" checked />
                                    <label class="form-check-label" for="columnDocDate">DocDate</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnDueDate" data-column="3" checked />
                                    <label class="form-check-label" for="columnDueDate">DueDate</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnDescription" data-column="4" checked />
                                    <label class="form-check-label" for="columnDescription">Description</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnSubTotal" data-column="5" checked />
                                    <label class="form-check-label" for="columnSubTotal">SubTotal</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnTotalAmount" data-column="6" checked />
                                    <label class="form-check-label" for="columnTotalAmount">TotalAmount</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnPaymentStatus" data-column="7" checked />
                                    <label class="form-check-label" for="columnPaymentStatus">Payment Reconciliation Status</label>
                                </div>
                            </li>
                            <li>
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input toggle-column" id="columnDocStatus" data-column="8" checked />
                                    <label class="form-check-label" for="columnDocStatus">DocStatus</label>
                                </div>
                            </li>
                        </ul>
                    </div>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Stakeholder.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DocDate)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.DueDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SubTotal) @Html.DisplayFor(modelItem => item.Currency)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalAmount) @Html.DisplayFor(modelItem => item.Currency)
                    </td>
                    <td>
                        @{
                            var statusDisplayName = EnumExtensions.GetEnumDisplayName<PaymentReconciliationStatus>(item.PaymentReconciliationStatus);
                        }
                        @Html.DisplayFor(modelItem => statusDisplayName)
                    </td>

                    <td>
                        @{
                            var statusDocDisplayName = EnumExtensions.GetEnumDisplayName<DocumentStatus>(item.DocStatus);
                        }
                        @Html.DisplayFor(modelItem => statusDocDisplayName)
                    </td>

                    @*  <td colspan="2">
                <a asp-action="Create" asp-route-id="@item.Id">Edit ✐ </a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details 🖹</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete ❌</a>
                @if (item.DocStatus == (byte)DocumentStatus.Finalized)
                {
                <text>|</text> <a asp-controller="Receipts" asp-action="Create" asp-route-invoiceId="@item.Id">Receipt 💰</a>
                }

                </td> *@
                    <td>
                        <div class="btn-group" role="group">
                            <a asp-action="Create" asp-route-id="@item.Id" class="btn  btn-primary" title="Edit">
                                <i class="bi bi-pencil-fill"></i> Edit
                            </a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info" title="Details">
                                <i class="bi bi-info-circle-fill"></i> Details
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn  btn-danger" title="Delete" onclick="return confirm('Are you sure you want to delete this item?');">
                                <i class="bi bi-trash-fill"></i> Delete
                            </a>
                            @if (item.DocStatus == (byte)DocumentStatus.Finalized)
                            {
                                <a asp-controller="Receipts" asp-action="Create" asp-route-invoiceId="@item.Id" class="btn  btn-success" title="Create Receipt">
                                    <i class="bi bi-cash"></i> Receipt
                                </a>
                            }
                        </div>
                    </td>

                </tr>
            }
        </tbody>
    </table>

<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)">Previous</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.PageIndex)
            {
                <li class="page-item active">
                    <span class="page-link">@i</span>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }
        }

        @if (Model.HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)">Next</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
        }
    </ul>
</nav>

@section Scripts {
    <script>

        //Refill value after posting
        document.addEventListener("DOMContentLoaded", function () {
            const urlParams = new URLSearchParams(window.location.search);

            // Populate the Id field with the corresponding query string value
            if (urlParams.has("filters[0].Value")) {
                document.getElementById("Id").value = urlParams.get("filters[0].Value");
            }

            if (urlParams.has("filters[1].Value")) {
                document.getElementById("DocDate").value = urlParams.get("filters[1].Value");
            }
            if (urlParams.has("filters[2].Value")) {
                document.getElementById("StakeholderId").value = urlParams.get("filters[2].Value");
            }
        });


        document.addEventListener("DOMContentLoaded", function () {
            const urlParams = new URLSearchParams(window.location.search);
            const appliedFiltersDiv = document.getElementById("appliedFilters");

            const filterGroups = {};

            // Group parameters by their index
            urlParams.forEach((value, key) => {
                const match = key.match(/filters\[(\d+)\]\.(\w+)/);
                if (match) {
                    const index = match[1];
                    const property = match[2];

                    if (!filterGroups[index]) {
                        filterGroups[index] = {};
                    }
                    filterGroups[index][property] = value;
                }
            });

            // Create badges for each group
            Object.keys(filterGroups).forEach(index => {
                const filter = filterGroups[index];
                if (filter.PropertyName && filter.Operation && filter.Value) {
                    const badge = document.createElement("span");
                    badge.className = "badge bg-info me-2";
                    badge.innerText = `${filter.PropertyName} ${filter.Operation} ${filter.Value}`;
                    appliedFiltersDiv.appendChild(badge);
                }
            });
        });



    </script>
}